if &compatible
    set nocompatible
endif

let $VIMPATH = fnamemodify(resolve(expand('<sfile>:p')), ':h:h')
let $VARPATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache').'/vim')

let s:is_sudo = $SUDO_USER !=# '' && $USER !=# $SUDO_USER

function! s:source_file(path, ...) abort
    let use_global = get(a:000, 0, !has('vim_starting'))
    let abspath = resolve(expand($VIMPATH.'/core/' . a:path))
    if !use_global
        execute 'source' fnameescape(abspath)
        return
    endif

    " substitute all 'set' to 'setglobal'
    let content = map(readfile(abspath),
                \ 'substitute(v:val, "^\\W*\\zsset\\ze\\W", "setglobal", "")')
    " create tempfile and source the tempfile
    let tempfile = tempname()
    try
        call writefile(content, tempfile)
        execute 'source' fnameescape(tempfile)
    finally
        if filereadable(tempfile)
            call delete(tempfile)
        endif
    endtry
endfunction

function! s:is_terminal_recording()
    return !empty($IS_TERMINAL_RECORDING)
endfunction


augroup MyAutoCmd
    autocmd!
    autocmd CursorHold *? syntax sync minlines=300
augroup END

let g:is_terminal_recording = 0
if s:is_terminal_recording()
    let g:is_terminal_recording = 1
endif

if has('vim_starting')
    call s:source_file('init.vim')
endif

call s:source_file('deinrc.vim')
call s:source_file('plugins/allkey.vim')

filetype plugin indent on
syntax enable

call dein#call_hook('source')
call dein#call_hook('post_source')

" loading configuration modules
call s:source_file('options.vim')
call s:source_file('autocmds.vim')
call s:source_file('mappings.vim')
call s:source_file('theme.vim')

if s:is_sudo
    set noswapfile
    set nobackup
    set nowritebackup
    set noundofile
    if has('nvim')
        set shada="NONE"
    else
        set viminfo="NONE"
    endif
endif

set secure

" vim: set foldmethod=marker:
